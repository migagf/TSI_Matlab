%% Create data matrix for analysis
clear, clc, close all

% Names and information of all runs
TheFiles = dir("C:\Users\Miguel.MIGUEL-DESK\Documents\PhD Files\TSI_Runs\Runs_OB\*.mat");
SummMatrix = zeros(length(TheFiles), 20);
doPlots = false;

for File = 1:length(SummMatrix)
    % Load DataSet
    [DataSet] = LoadData(strcat(TheFiles(File).folder,'\' ,TheFiles(File).name));
    
    % Get ground motion ID
    groundmotion = str2double(TheFiles(File).name(6:7));
    
    % Relative wheelset/track displacement
    RelDispl = 100 / 2.54 * (DataSet.TrainResponse.X(7, :) + ...
        - DataSet.BridgeResponse.X_Track(1, :)); % inches
    
    % Rotation of the track
    TrackRotation = rad2deg(DataSet.BridgeResponse.X(3,:) + ...
        + (-DataSet.BridgeResponse.X(8,:) + ...
        + DataSet.BridgeResponse.X(5,:)) / 1.7742);
    
    % Relative rotation track/wheelset
    RelRotation = abs(-DataSet.TrainResponse.X(9, :) - TrackRotation);
    
    if doPlots
        plot(TrackRotation)
        hold on
        plot(-DataSet.TrainResponse.X(9,:), ':')
    
        figure()
        plot(RelRotation)
    
        figure()
        plot(DataSet.TrainResponse.X(7, :))
        hold on
        plot(DataSet.BridgeResponse.X_Track(1, :))
    
        figure()
        plot(abs(RelDispl))
    end

    % Check for derailment (if relative displacement at the end of the
    % analysis is large, then identify derailment).
    if abs(RelDispl(end)) >= 10
        DRCase = 1;
    else
        DRCase = 0;
    end
    
    % Now, check for derailment type and find derailment instant
    climb_strt = find(abs(RelDispl) > 1, 1);     % start climbing instant
    climb_full = find(abs(RelDispl) > 2, 1);     % Full climbing instant
    overt_full = find(abs(RelRotation) > 30, 1); % Overturning instant
    
    if DRCase == 1
        if ~isempty(climb_full) && abs(RelRotation(climb_full)) < 3.0
            disp('Sliding Derail')
            firstDerail = climb_full;

        elseif ~isempty(overt_full) && abs(DataSet.NormalForce(overt_full)) > 0
            disp('Overturning Derail')
            firstDerail = overt_full;

        else
            disp('Combined Derail')
            disp(File)
            firstDerail = climb_full;

        end
    else
        disp('No derailment')
        firstDerail = length(RelDispl);
    end


    % Obtain max response of bridge
    PeakDBridge = max(abs(DataSet.BridgeResponse.X(1,1:end)));
    PeakVBridge = max(abs(DataSet.BridgeResponse.Xtdot(1,1:end)));
    PeakABridge = max(abs(DataSet.BridgeResponse.Xddot(1,1:end) + DataSet.ugddot));
    PeakRBridge = max(abs(DataSet.BridgeResponse.X(2,1:end)));
    
    % Obtain max response of train
    PeakDCarBody   = max(abs(DataSet.TrainResponse.X(1,1:firstDerail)));
    PeakDWheelSet  = max(abs(DataSet.TrainResponse.X(7,1:firstDerail)));
    PeakRCarBody   = max(abs(DataSet.TrainResponse.X(3,1:firstDerail)));
    PeakRWheelSet  = max(abs(DataSet.TrainResponse.X(9,1:firstDerail)));
    
    PeakRotUplift  = max(abs(DataSet.TrainResponse.X(9, 1:firstDerail) + DataSet.BridgeResponse.X(3, 1:firstDerail) + ...
        - (DataSet.BridgeResponse.X(8, 1:firstDerail) - DataSet.BridgeResponse.X(5, 1:firstDerail))/1.7442));
    
    
    % plot(DataSet.TrainResponse.X(9,:)+DataSet.BridgeResponse.X(3,:))
    %PeakLftWUplift = max(abs(DataSet.TrainResponse.Uplift(:,1)));
    %PeakRgtWUplift = max(abs(DataSet.TrainResponse.Uplift(:,2)));
    PeakAhCarBody  = max(abs(DataSet.TrainResponse.A(1,1:firstDerail)));
    PeakAvCarBody  = max(abs(DataSet.TrainResponse.A(2,1:firstDerail)));
    
    % Ground Motion parameters
    PGA = max(abs(DataSet.ugddot));
    PGV = max(abs(DataSet.ugdot));
    
    % Store Variables
    SummMatrix(File,:) = [...
        DataSet.HL, DataSet.CF, DataSet.Vel, DataSet.BM, PGA, PGV,...
        PeakDBridge, PeakVBridge, PeakABridge, PeakRBridge,...
        PeakDCarBody, PeakDWheelSet, PeakRCarBody, PeakRWheelSet,...
        PeakRotUplift, PeakAhCarBody, PeakAvCarBody,...
        abs(PeakDBridge - PeakDWheelSet), DRCase, groundmotion];
    
    clear DataSet

end

SummTable = array2table(SummMatrix,...
    'VariableNames', ...
    {'hazlvl', 'cf', 'spd', 'bridgemodel', 'pga', 'pgv', ...
    'pbd', 'pbv', 'pba', 'pbrot', ... 
    'pcd', 'pwd', 'pcrot', 'pwrot', ...
    'purot', 'pcha', 'pcva', 'drdis', 'drcase', 'gm'});

save("SummTable", "SummTable")
% [DataSet] = LoadData(TheFiles(File).name);

%% In code function to extract selected response parameters

function [Data] = LoadData(FileName)%% Extract Data
    load(FileName, 'BridgeResponse', 'X', 'V', 'A', 'HL', 'Vel', 'ugddot', 'ugdot', 'NL', 'CF', 'Left_Cont', 'Right_Cont');
    
    Data.HL = HL;
    Data.ugddot = ugddot;
    Data.ugdot = ugdot;
    Data.BM = NL;
    Data.BridgeResponse = BridgeResponse;
    Data.Vel = Vel;
    Data.TrainResponse.X = X;
    Data.TrainResponse.V = V;
    Data.TrainResponse.A = A;
    Data.CF = CF;
    Data.NormalForce = Left_Cont + Right_Cont;

end

